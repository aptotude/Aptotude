{"version":3,"file":"main.d2e8550a800764e179a6.bundle.js","sources":["webpack:///./src/components/Button/AptoButton.tsx"],"sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport './aptoButton.scss';\nimport { StandardTypes } from '../../utils/standardTypes';\nimport { Link } from '@reach/router';\n\nexport type ButtonKind = 'button' | 'link';\nexport type ButtonVariant =\n  | 'primary'\n  | 'primaryInverse'\n  | 'secondary'\n  | 'secondaryDark'\n  | 'white'\n  | 'danger';\n\nconst COMPONENT_PREFIX = 'AptoButton';\n\nexport interface AptoButtonDisplayProps extends StandardTypes {\n  kind?: ButtonKind;\n  variant?: ButtonVariant;\n  active?: boolean;\n  disabled?: boolean;\n  onHold?: () => void;\n  onClick?: (\n    event: React.MouseEvent<HTMLButtonElement | HTMLAnchorElement>\n  ) => void;\n  href?: string;\n  role?: string;\n  title?: string;\n  target?: string;\n  type?: string;\n  to?: string;\n  hold?: boolean;\n}\n\nexport class AptoButton extends React.Component<AptoButtonDisplayProps> {\n  public buttonRef: React.RefObject<{}>;\n  public holdTimer: any = null;\n  public static defaultProps = {\n    kind: 'button',\n    variant: 'primary',\n    active: false,\n    disabled: false,\n    hold: false\n  };\n\n  public constructor(props = {}) {\n    super(props);\n    this.buttonRef = React.createRef();\n    this.handleClick = this.handleClick.bind(this);\n    this.handleMouseDown = this.handleMouseDown.bind(this);\n    this.handleMouseUp = this.handleMouseUp.bind(this);\n  }\n\n  public handleMouseDown(\n    event: React.MouseEvent<HTMLButtonElement | HTMLAnchorElement>\n  ) {\n    const { onHold, disabled } = this.props;\n\n    if (disabled) {\n      return;\n    }\n\n    this.setHoldStatus(true);\n\n    if (this.holdTimer) {\n      clearTimeout(this.holdTimer);\n    }\n\n    this.holdTimer = setTimeout(() => {\n      this.setHoldStatus(false);\n      if (onHold) {\n        onHold();\n      }\n    }, 2000);\n  }\n\n  public handleMouseUp(\n    event: React.MouseEvent<HTMLButtonElement | HTMLAnchorElement>\n  ) {\n    this.setHoldStatus(false);\n\n    if (this.holdTimer) {\n      clearTimeout(this.holdTimer);\n    }\n  }\n\n  public handleClick(\n    event: React.MouseEvent<HTMLButtonElement | HTMLAnchorElement>\n  ) {\n    const { disabled, onClick, hold } = this.props;\n\n    if (disabled || hold) {\n      if (event) {\n        event.preventDefault();\n      }\n    }\n\n    if (disabled || hold) {\n      if (event) {\n        event.stopPropagation();\n      }\n      return;\n    }\n\n    if (onClick) {\n      onClick(event);\n    }\n  }\n\n  public render() {\n    const {\n      variant,\n      kind,\n      className,\n      children,\n      disabled,\n      active,\n      href,\n      to,\n      title,\n      hold,\n      onHold,\n      target,\n      ...rest\n    } = this.props;\n\n    if (href && href === '#') {\n      rest.role = rest.role || 'button';\n    }\n\n    const Component: any = href ? 'a' : 'button';\n\n    const classes = classNames(\n      COMPONENT_PREFIX,\n      `${COMPONENT_PREFIX}--${kind}`,\n      `${COMPONENT_PREFIX}--${variant}`,\n      hold && `${COMPONENT_PREFIX}Hold`,\n      disabled && `${COMPONENT_PREFIX}--disabled`,\n      active && `${COMPONENT_PREFIX}--active`,\n      className\n    );\n\n    const propList: any = {\n      'aria-label': title,\n      onClick: this.handleClick,\n      className: classes,\n      target,\n      ...rest\n    };\n\n    if (hold) {\n      propList.onMouseDown = this.handleMouseDown;\n      propList.onMouseUp = this.handleMouseUp;\n      propList.onMouseOut = this.handleMouseUp;\n      propList.onTouchStart = this.handleMouseDown;\n      propList.onTouchEnd = this.handleMouseUp;\n      propList.onTouchMove = this.handleMouseUp;\n    }\n\n    if (propList.target && propList.target === '_blank') {\n      propList.rel = 'noopener noreferrer';\n    }\n\n    // if we use the to attribute, we render the button as a reach router link\n    if (to) {\n      return (\n        <Link to={to} {...propList}>\n          {children}\n        </Link>\n      );\n    }\n\n    return (\n      <Component\n        ref={this.buttonRef}\n        href={href}\n        disabled={disabled || undefined}\n        {...propList}\n      >\n        {children}\n        {hold && (\n          <span className=\"AptoButtonHold-progressBarWrapper\">\n            <span className=\"AptoButtonHold-progressBar\">&nbsp;</span>\n          </span>\n        )}\n      </Component>\n    );\n  }\n\n  private setHoldStatus(active = true) {\n    const node: any = this.buttonRef && this.buttonRef.current;\n    if (node) {\n      if (active) {\n        node.classList.add('AptoButtonHold--processing');\n      } else {\n        node.classList.remove('AptoButtonHold--processing');\n      }\n    }\n  }\n}\n"],"mappings":"AAmCA","sourceRoot":""}